import { animate, createScope, utils } from "animejs";
import { useEffect, useRef } from "preact/hooks";

import type { HTMLAttributes } from "preact";
import type { Scope } from "animejs";

export interface AvatarProps extends HTMLAttributes<HTMLDivElement> {
  src?: string;
}

export function Avatar(props: AvatarProps) {
  const root = useRef(null);
  const scope = useRef<Scope>(null);

  useEffect(() => {
    scope.current = createScope({ root }).add((_self) => {
      const shapes = [
        "M183.449 13.313C236.026 5.33956 294.336 -12.7022 336.794 19.3164C382.15 53.5196 397.159 115.906 394.755 172.662C392.446 227.192 363.273 275.303 324.334 313.547C285.803 351.389 237.121 386.199 183.449 380.194C132.733 374.519 104.191 323.886 70.919 285.191C41.4549 250.925 5.08631 217.854 5.00017 172.662C4.91394 127.416 36.7407 89.8386 70.4893 59.7022C102.052 31.5177 141.612 19.6577 183.449 13.313Z",
        "M190.449 20.313C243.026 11.33956 287.336 -5.7022 329.794 26.3164C375.15 60.5196 390.159 122.906 387.755 179.662C385.446 234.192 356.273 282.303 317.334 320.547C278.803 358.389 230.121 379.199 176.449 373.194C125.733 367.519 111.191 316.886 77.919 278.191C48.4549 243.925 12.08631 210.854 12.00017 165.662C11.91394 120.416 43.7407 82.8386 77.4893 52.7022C109.052 24.5177 148.612 26.6577 190.449 20.313Z",
        "M176.449 8.313C229.026 -0.66044 301.336 -20.7022 343.794 11.3164C389.15 45.5196 404.159 107.906 401.755 164.662C399.446 219.192 370.273 267.303 331.334 305.547C292.803 343.389 244.121 392.199 190.449 386.194C139.733 380.519 97.191 330.886 63.919 292.191C34.4549 257.925 -1.91369 224.854 -1.99983 179.662C-2.08606 134.416 29.7407 96.8386 63.4893 66.7022C95.052 38.5177 134.612 14.6577 176.449 8.313Z",
        "M195.449 25.313C248.026 16.33956 282.336 -0.7022 324.794 31.3164C370.15 65.5196 385.159 127.906 382.755 184.662C380.446 239.192 351.273 287.303 312.334 325.547C273.803 363.389 225.121 374.199 171.449 368.194C120.733 362.519 116.191 311.886 82.919 273.191C53.4549 238.925 17.08631 205.854 17.00017 160.662C16.91394 115.416 48.7407 77.8386 82.4893 47.7022C114.052 19.5177 153.612 31.6577 195.449 25.313Z",
        "M172.449 4.313C225.026 -4.66044 305.336 -24.7022 347.794 7.3164C393.15 41.5196 408.159 103.906 405.755 160.662C403.446 215.192 374.273 263.303 335.334 301.547C296.803 339.389 248.121 396.199 194.449 390.194C143.733 384.519 93.191 334.886 59.919 296.191C30.4549 261.925 -5.91369 228.854 -5.99983 183.662C-6.08606 138.416 25.7407 100.8386 59.4893 70.7022C91.052 42.5177 130.612 10.6577 172.449 4.313Z",
        "M193.449 23.313C246.026 14.33956 284.336 -2.7022 326.794 29.3164C372.15 63.5196 387.159 125.906 384.755 182.662C382.446 237.192 353.273 285.303 314.334 323.547C275.803 361.389 227.121 376.199 173.449 370.194C122.733 364.519 114.191 313.886 80.919 275.191C51.4549 240.925 15.08631 207.854 15.00017 162.662C14.91394 117.416 46.7407 79.8386 80.4893 49.7022C112.052 21.5177 151.612 29.6577 193.449 23.313Z",
        "M174.449 6.313C227.026 -2.66044 303.336 -22.7022 345.794 9.3164C391.15 43.5196 406.159 105.906 403.755 162.662C401.446 217.192 372.273 265.303 333.334 303.547C294.803 341.389 246.121 394.199 192.449 388.194C141.733 382.519 95.191 332.886 61.919 294.191C32.4549 259.925 -3.91369 226.854 -3.99983 181.662C-4.08606 136.416 27.7407 98.8386 61.4893 68.7022C93.052 40.5177 132.612 12.6577 174.449 6.313Z",
        "M198.449 28.313C251.026 19.33956 279.336 2.2978 321.794 34.3164C367.15 68.5196 382.159 130.906 379.755 187.662C377.446 242.192 348.273 290.303 309.334 328.547C270.803 366.389 222.121 371.199 168.449 365.194C117.733 359.519 119.191 308.886 85.919 270.191C56.4549 235.925 20.08631 202.854 20.00017 157.662C19.91394 112.416 51.7407 74.8386 85.4893 44.7022C117.052 16.5177 156.612 34.6577 198.449 28.313Z",
        "M178.449 10.313C231.026 2.33956 299.336 -18.7022 341.794 13.3164C387.15 47.5196 402.159 109.906 399.755 166.662C397.446 221.192 368.273 269.303 329.334 307.547C290.803 345.389 242.121 390.199 188.449 384.194C137.733 378.519 99.191 328.886 65.919 290.191C36.4549 255.925 0.08631 222.854 0.00017 177.662C-0.08606 132.416 32.7407 94.8386 66.4893 64.7022C98.052 36.5177 137.612 16.6577 178.449 10.313Z",
        "M188.449 18.313C241.026 10.33956 289.336 -7.7022 331.794 24.3164C377.15 58.5196 392.159 120.906 389.755 177.662C387.446 232.192 358.273 280.303 319.334 318.547C280.803 356.389 232.121 381.199 178.449 375.194C127.733 369.519 109.191 318.886 75.919 280.191C46.4549 245.925 10.08631 212.854 10.00017 167.662C9.91394 122.416 41.7407 84.8386 75.4893 54.7022C107.052 26.5177 146.612 24.6577 188.449 18.313Z",
        "M191.449 21.313C244.026 12.33956 286.336 -4.7022 328.794 27.3164C374.15 61.5196 389.159 123.906 386.755 180.662C384.446 235.192 355.273 283.303 316.334 321.547C277.803 359.389 229.121 378.199 175.449 372.194C124.733 366.519 112.191 315.886 78.919 277.191C49.4549 242.925 13.08631 209.854 13.00017 164.662C12.91394 119.416 44.7407 81.8386 78.4893 51.7022C110.052 23.5177 149.612 27.6577 191.449 21.313Z",
        "M185.449 15.313C238.026 7.33956 296.336 -10.7022 338.794 21.3164C384.15 55.5196 399.159 117.906 396.755 174.662C394.446 229.192 365.273 277.303 326.334 315.547C287.803 353.389 239.121 388.199 185.449 382.194C134.733 376.519 106.191 325.886 72.919 287.191C43.4549 252.925 7.08631 219.854 7.00017 174.662C6.91394 129.416 38.7407 91.8386 72.4893 61.7022C104.052 33.5177 143.612 21.6577 185.449 15.313Z",
        "M177.449 9.313C230.026 1.33956 305.336 -19.7022 347.794 12.3164C393.15 46.5196 408.159 108.906 405.755 165.662C403.446 220.192 374.273 268.303 335.334 306.547C296.803 344.389 248.121 396.199 194.449 390.194C143.733 384.519 97.191 334.886 63.919 296.191C34.4549 261.925 -1.91369 228.854 -1.99983 183.662C-2.08606 138.416 29.7407 100.8386 63.4893 70.7022C95.052 42.5177 134.612 14.6577 177.449 9.313Z",
        "M179.449 11.313C232.026 3.33956 301.336 -16.7022 343.794 15.3164C389.15 49.5196 404.159 111.906 401.755 168.662C399.446 223.192 370.273 271.303 331.334 309.547C292.803 347.389 244.121 392.199 190.449 386.194C139.733 380.519 99.191 330.886 65.919 292.191C36.4549 257.925 0.08631 224.854 0.00017 179.662C-0.08606 134.416 32.7407 96.8386 66.4893 66.7022C98.052 38.5177 137.612 16.6577 179.449 11.313Z",
      ];

      function generatePoints() {
        const point = utils.random(0, shapes.length - 1);
        return shapes[point];
      }

      function animatePoints() {
        const points = generatePoints();

        animate("#clipPathShape", {
          d: points,
          ease: "easeInOutQuad",
          duration: 800,
          loop: false,
          onComplete: animatePoints,
        });
      }

      animatePoints();
    });

    return () => scope.current?.revert();
  }, []);

  // Return any prerenderable JSX here which makes sense for your island
  return (
    <div ref={root} class={props.class}>
      <svg
        class="block object-contain md:object-cover"
        width="0"
        height="0"
        overflow="visible"
        viewBox="-100 -100 700 700"
      >
        <defs>
          <clipPath id="blob" clipPathUnits="userSpaceOnUse">
            <path
              id="clipPathShape"
              d="M183.449 13.313C236.026 5.33956 294.336 -12.7022 336.794 19.3164C382.15 53.5196 397.159 115.906 394.755 172.662C392.446 227.192 363.273 275.303 324.334 313.547C285.803 351.389 237.121 386.199 183.449 380.194C132.733 374.519 104.191 323.886 70.919 285.191C41.4549 250.925 5.08631 217.854 5.00017 172.662C4.91394 127.416 36.7407 89.8386 70.4893 59.7022C102.052 31.5177 141.612 19.6577 183.449 13.313Z"
            />
          </clipPath>
        </defs>
      </svg>

      <div>
        <img
          src="https://avatars.githubusercontent.com/u/30122216?s=400&u=205c4e5b007db46a47857bcbb4aff49adf6deb6c&v=4"
          class="block object-contain md:object-cover clip-path-[url(#blob)]"
          width="400"
          height="400"
          alt=""
        />
      </div>
    </div>
  );
}
